using Flurl.Http;

namespace TwistedFizzBuzz.Library
{
    public static class TwistedFizzBuzz
    {
        /// <summary>
        /// Runs the classic FizzBuzz algorithm for a range of numbers
        /// </summary>
        /// <param name="initial"></param>
        /// <param name="final"></param>
        /// <returns></returns>
        public static List<string> StandardFizzBuzz(int initial, int final)
        {
            List<string> result = new();

            for (int i = initial; i <= final; i++)
                result.Add(GetStandardFizzBuzz(i));

            return result;
        }

        /// <summary>
        /// Runs the classic FizzBuzz algorithm based on a non-sequential set of numbers
        /// </summary>
        /// <param name="setOfNumbers"></param>
        /// <returns></returns>
        public static List<string> StandardFizzBuzz(params int[] setOfNumbers)
        {
            List<string> result = new();

            foreach (int number in setOfNumbers)
                result.Add(GetStandardFizzBuzz(number));

            return result;
        }

        /// <summary>
        /// Runs a custom version of the FizzBuzz algorithm for a range of numbers, based on the given word and number pairs
        /// </summary>
        /// <param name="initial"></param>
        /// <param name="final"></param>
        /// <param name="customPairs"></param>
        /// <returns></returns>
        public static List<string> CustomFizzBuzz(int initial, int final, List<TwistedFizzBuzzDto> customPairs)
        {
            List<string> result = new();

            for (int i = initial; i <= final; i++)
            {
                string concatenatedWord = string.Empty;

                foreach (var pair in customPairs)
                    if (i % pair.Number == 0)
                        concatenatedWord += pair.Word;

                if (string.IsNullOrEmpty(concatenatedWord))
                    result.Add(Convert.ToString(i));
                else
                    result.Add(concatenatedWord);
            }

            return result;
        }

        /// <summary>
        /// Runs a custom version of the FizzBuzz algorithm for a range of numbers, based on the word and number pair generated by the provided endpoint
        /// </summary>
        /// <param name="initial"></param>
        /// <param name="final"></param>
        /// <param name="endpoint"></param>
        /// <returns></returns>
        public static async Task<List<string>> CustomFizzBuzz(int initial, int final, string endpoint)
        {
            List<string> result = new();
            TwistedFizzBuzzDto generatedValues = await GenerateNumberAndWord(endpoint);

            for (int i = initial; i <= final; i++)
                if (i % generatedValues.Number == 0)
                    result.Add(generatedValues.Word);
                else
                    result.Add(Convert.ToString(i));

            return result;
        }

        private static async Task<TwistedFizzBuzzDto> GenerateNumberAndWord(string endpoint)
        {
            try
            {
                TwistedFizzBuzzDto generatedValues = await endpoint
                    .WithHeader("User-Agent", "Console")
                    .GetJsonAsync<TwistedFizzBuzzDto>();

                Console.WriteLine("Using Number {0} and Word {1}", generatedValues.Number, generatedValues.Word);

                return generatedValues;
            }
            catch (FlurlHttpException ex)
            {
                Console.WriteLine("Request to endpoint {0} failed with message {1}", endpoint, ex.Message);

                throw;
            }
        }

        private static string GetStandardFizzBuzz(int i)
        {
            if (i % 5 == 0 && i % 3 == 0)
                return "FizzBuzz";
            else if (i % 3 == 0)
                return "Fizz";
            else if (i % 5 == 0)
                return "Buzz";
            else
                return Convert.ToString(i);
        }
    }
}
